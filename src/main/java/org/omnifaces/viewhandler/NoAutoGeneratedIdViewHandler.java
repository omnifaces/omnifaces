/*
 * Copyright 2018 OmniFaces
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */
package org.omnifaces.viewhandler;

import static java.lang.Boolean.FALSE;
import static java.lang.String.format;
import static javax.faces.component.UINamingContainer.getSeparatorChar;
import static javax.faces.component.UIViewRoot.UNIQUE_ID_PREFIX;
import static org.omnifaces.util.Components.findComponentRelatively;
import static org.omnifaces.util.Components.getCurrentComponent;
import static org.omnifaces.util.Faces.getContext;
import static org.omnifaces.util.Faces.getViewRoot;
import static org.omnifaces.util.FacesLocal.isDevelopment;
import java.io.IOException;
import java.io.Writer;
import java.util.logging.Logger;

import javax.faces.application.Application;
import javax.faces.application.ProjectStage;
import javax.faces.application.ViewHandler;
import javax.faces.application.ViewHandlerWrapper;
import javax.faces.component.UIComponent;
import javax.faces.component.UIViewRoot;
import javax.faces.context.FacesContext;
import javax.faces.context.FacesContextWrapper;
import javax.faces.context.ResponseWriter;
import javax.faces.context.ResponseWriterWrapper;

import org.omnifaces.util.Utils;

/**
 * <p>
 * This {@link ViewHandler} once installed will during development stage throw an {@link IllegalStateException} whenever
 * an automatically generated JSF component ID  (<code>j_id...</code>) is encountered in the rendered output.
 * This has various advantages:
 * <ul>
 * <li>Keep the HTML output free of autogenerated JSF component IDs.
 * <li>No need to fix the IDs again and again when the client side unit tester encounters an unusable autogenerated ID.
 * <li>Make the developer aware which components are naming containers and/or implicitly require outputting its ID.
 * </ul>
 * <p>
 * Note that this does not check every component for its ID directly, but instead checks the {@link ResponseWriter} for
 * writes to the "id" attribute. Components that write their markup in any other way won't be checked and will thus
 * slip through.
 * <p>
 * Additionally, since version 3.0 it will also log a warning line when <code>prependId="false"</code> is encountered.
 * This is considered bad practice. See also
 * <a href="https://stackoverflow.com/a/7416770/157882">UIForm with prependId=“false” breaks &lt;f:ajax render&gt;</a>.
 *
 * <h3>Installation</h3>
 * <p>
 * Register it as <code>&lt;view-handler&gt;</code> in <code>faces-config.xml</code>.
 * <pre>
 * &lt;application&gt;
 *     &lt;view-handler&gt;org.omnifaces.viewhandler.NoAutoGeneratedIdViewHandler&lt;/view-handler&gt;
 * &lt;/application&gt;
 * </pre>
 * <p>
 * Note that this only runs if {@link Application#getProjectStage()} equals to {@link ProjectStage#Development}.
 *
 * @since 2.0
 * @author Arjan Tijms
 */
public class NoAutoGeneratedIdViewHandler extends ViewHandlerWrapper {

	// Private constants ----------------------------------------------------------------------------------------------

	private static final Logger logger = Logger.getLogger(NoAutoGeneratedIdViewHandler.class.getName());

	private static final String WARNING_PREPENDID_FALSE_ENCOUNTERED =
		"prependId=false encountered on component type %s. This is bad practice, see also https://stackoverflow.com/a/7416770/157882";
	private static final String ERROR_AUTO_GENERATED_ID_ENCOUNTERED =
		"Auto generated ID '%s' encountered on component type %s.";

	// Constructors ---------------------------------------------------------------------------------------------------

	/**
	 * Construct a new No Auto Generated Id view handler around the given wrapped view handler.
	 *
	 * @param wrapped
	 *            The wrapped view handler.
	 */
	public NoAutoGeneratedIdViewHandler(ViewHandler wrapped) {
		super(wrapped);
	}

	// Actions --------------------------------------------------------------------------------------------------------

	@Override
	public void renderView(FacesContext context, UIViewRoot viewToRender) throws IOException {

		super.renderView(isDevelopment(context) ? new FacesContextWrapper(context) {

			@Override
			public void setResponseWriter(ResponseWriter responseWriter) {
				super.setResponseWriter(new NoAutoGeneratedIdResponseWriter(responseWriter));
			}

		} : context, viewToRender);
	}

	// Nested classes -------------------------------------------------------------------------------------------------

	/**
	 * This response writer throws an {@link IllegalStateException} when an attribute with name "id" is written with
	 * a non-null value which starts with {@link UIViewRoot#UNIQUE_ID_PREFIX} or contains an intermediate.
	 *
	 * @since 2.0
	 * @author Arjan Tijms
	 */
	public static class NoAutoGeneratedIdResponseWriter extends ResponseWriterWrapper {

		private final char separatorChar;
		private final String intermediateIdPrefix;

		public NoAutoGeneratedIdResponseWriter(ResponseWriter wrapped) {
			super(wrapped);
			separatorChar = getSeparatorChar(getContext());
			intermediateIdPrefix = separatorChar + UNIQUE_ID_PREFIX;
		}

		@Override
		public ResponseWriter cloneWithWriter(Writer writer) {
			return new NoAutoGeneratedIdResponseWriter(super.cloneWithWriter(writer));
		}

		@Override
		public void startElement(String name, UIComponent component) throws IOException {
			if (component != null && FALSE.equals(component.getAttributes().get("prependId"))) {
				logger.warning(() -> format(WARNING_PREPENDID_FALSE_ENCOUNTERED, getComponentType(component)));
			}

			super.startElement(name, component);
		}

		@Override
		public void writeAttribute(String name, Object value, String property) throws IOException {

			if (value != null && "id".equals(name)) {
				String id = value.toString();

				if (id.startsWith(UNIQUE_ID_PREFIX) || id.contains(intermediateIdPrefix)) {
					int end = id.indexOf(separatorChar, id.indexOf(UNIQUE_ID_PREFIX));

					if (end > 0) {
						id = id.substring(0, end);
					}

					UIComponent component = findComponentRelatively(Utils.<UIComponent>coalesce(getCurrentComponent(), getViewRoot()), id);

					if (!(component instanceof UIViewRoot)) { // Skip viewstate hidden inputs.
						throw new IllegalStateException(format(ERROR_AUTO_GENERATED_ID_ENCOUNTERED, id, getComponentType(component)));
					}
				}
			}

			super.writeAttribute(name, value, property);
		}

		private static String getComponentType(UIComponent component) {
			return (component == null) ? "<null>" : component.getClass().getName() + ":" + component.getRendererType();
		}

	}

}